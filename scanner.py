import requests
from bs4 import BeautifulSoup
import subprocess
import validators
import bleach
import os
import logging

# Initialize the logger
logging.basicConfig(filename='scan.log', level=logging.INFO)

# Function to validate a URL
def is_valid_url(url):
    return validators.url(url)

# Function to scan a website and find all links
def scan_website(url):
    if not is_valid_url(url):
        logging.error("Invalid URL provided: %s", url)
        print("Invalid URL. Please provide a valid URL.")
        return []

    try:
        response = requests.get(url)
        if response.status_code == 200:
            soup = BeautifulSoup(response.text, 'html.parser')
            links = []
            for anchor in soup.find_all('a'):
                link = anchor.get('href')
                if link:
                    # Sanitize the link to prevent XSS attacks
                    sanitized_link = bleach.clean(link, tags=[], attributes={})
                    links.append(sanitized_link)
            return links
        else:
            logging.error("Failed to retrieve URL: %s, Status code: %s", url, response.status_code)
            print(f"Failed to retrieve {url}. Status code: {response.status_code}")
    except requests.exceptions.RequestException as e:
        logging.error("An error occurred while scanning: %s", str(e))
        print(f"An error occurred: {e}")

# Function to scan a URL for malware using ClamAV
def scan_for_malware(url):
    if not is_valid_url(url):
        logging.error("Invalid URL provided: %s", url)
        print("Invalid URL. Please provide a valid URL.")
        return

    try:
        response = requests.get(url)
        if response.status_code == 200:
            content = response.content
            with open('temp_file', 'wb') as temp_file:
                temp_file.write(content)
            result = subprocess.run(['clamscan', 'temp_file'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
            if "Infected files: 0" in result.stdout:
                logging.info("No malware found on URL: %s", url)
                print(f"No malware found on {url}")
            else:
                logging.warning("Malware found on URL: %s:\n%s", url, result.stdout)
                print(f"Malware found on {url}:\n{result.stdout}")
        else:
            logging.error("Failed to retrieve URL: %s, Status code: %s", url, response.status_code)
            print(f"Failed to retrieve {url}. Status code: {response.status_code}")
    except requests.exceptions.RequestException as e:
        logging.error("An error occurred while scanning: %s", str(e))
        print(f"An error occurred: {e}")

# Function to check for common configuration files
def check_for_config_files(url):
    if not is_valid_url(url):
        logging.error("Invalid URL provided: %s", url)
        print("Invalid URL. Please provide a valid URL.")
        return

    common_config_files = [
        "robots.txt",
        ".htaccess",
        "wp-config.php",
        "config.php",
        "web.config",
    ]
    for file in common_config_files:
        config_url = f"{url}/{file}"
        response = requests.get(config_url)
        if response.status_code == 200:
            logging.info("Found a potentially sensitive configuration file: %s", config_url)
            print(f"Found a potentially sensitive configuration file: {config_url}")

# Function to perform a SQL injection test
def sql_injection_test(url):
    payload = {
        "username": "admin' OR '1'='1",
        "password": "password"
    }

    response = requests.post(url, data=payload)

    if "Login successful" in response.text:
        logging.warning("SQL injection test successful")
        print("SQL injection successful")
    else:
        logging.info("SQL injection test failed")
        print("SQL injection failed")

if __name__ == '__main__':
    website_url = input("Enter the website URL to scan: ")

    # Create a secure temporary file
    with open('temp_file', 'wb') as temp_file:
        temp_file.write(b"")  
    os.chmod('temp_file', 0o600)  

    links = scan_website(website_url)
    
    if links:
        print(f"Links found on {website_url}:\n")
        for link in links:
            print(link)
        
        print("\nScanning for malware...\n")
        scan_for_malware(website_url)

        print("\nChecking for common configuration files...\n")
        check_for_config_files(website_url)

        # Perform SQL injection test
        print("\nPerforming SQL injection test...\n")
        sql_injection_test(website_url)

    else:
        print(f"No links found on {website_url}")

    # Clean up the temporary file
    os.remove('temp_file')
